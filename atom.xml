<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kivutarのブログ]]></title>
  <link href="http://kivutar.github.com/atom.xml" rel="self"/>
  <link href="http://kivutar.github.com/"/>
  <updated>2012-10-25T17:20:27+02:00</updated>
  <id>http://kivutar.github.com/</id>
  <author>
    <name><![CDATA[Jean-André Santoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Polka ported to Perl6]]></title>
    <link href="http://kivutar.github.com/blog/2012/10/25/polka-ported-to-perl6/"/>
    <updated>2012-10-25T14:27:00+02:00</updated>
    <id>http://kivutar.github.com/blog/2012/10/25/polka-ported-to-perl6</id>
    <content type="html"><![CDATA[<p>Polka is a small web-app I wrote using Dancer as an exercise in minimalism. It is inspired by <a href="http://werc.cat-v.org">werc</a>.
Polka recursively reads a directory filled with markdown files, convert and serve them using HTTP, with a nice design and a navigation menu.</p>

<p>My friend Marc asked me to port it to Rakudo Perl6.</p>

<p>It took me a while to figure out all the new tricks, as it is my first Perl6 script. The code may not be perfect for this reason (and I am open to code reviews) but it gave me a first feeling of the so long awaited language.</p>

<p>I&#8217;m trying to give a feedback by comparing small blocs of code in the 2 idioms.</p>

<h2>First, the dependencies.</h2>

<p>Polka depends on Dancer (a web framework) and Text::MarkDown (markdown to html converter).</p>

<figure class='code'><figcaption><span>Perl5  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'><span class="k">use</span> <span class="n">Dancer</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Text::</span><span class="n">Markdown</span> <span class="s">&#39;markdown&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rakudo Star bundles a clone of Dancer called Bailador. It is far from complete, but ok for our case.</p>

<p>No need to specify <em>use utf8</em>, Perl6 allows utf8 source code by default.</p>

<p><em>Text::Markdown</em> in Perl6 is not complete either: I found it on Karl Masak github, it makes use of Perl6 Grammars to parse Markdown, but no HTML converter was done. Althrough it may be easy to code, the grammar itself is incomplete. Please contribute to <em>Text::Markdown</em> if you have some free time left.</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl6</span>
</span><span class='line'><span class="k">use</span> <span class="n">Bailador</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Text::</span><span class="n">Markdown</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>My first good surprise</h2>

<p>Perl6 has a builting <em>slurp</em> function (slurp means reading a file in a single time), so the following line vanished:</p>

<figure class='code'><figcaption><span>Perl5  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">slurp</span> <span class="p">{</span> <span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span> <span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">&#39;&lt;:utf8&#39;</span><span class="p">,</span> <span class="nb">shift</span><span class="p">);</span> <span class="sr">&lt;$fh&gt;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Yet another goodie</h2>

<p>In Polka, this recursive function walk through subdirectories and build a hash that I use later to generate the menu HTML markup.</p>

<figure class='code'><figcaption><span>Perl5  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">dirtree</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$dir</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%tree</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">opendir</span><span class="p">(</span><span class="n">DIR</span><span class="p">,</span> <span class="nv">$dir</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@files</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span><span class="o">!</span><span class="sr">/^\.\.?$/</span><span class="p">}</span> <span class="nb">readdir</span><span class="p">(</span><span class="n">DIR</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">closedir</span><span class="p">(</span><span class="n">DIR</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$tree</span><span class="p">{</span><span class="s">&quot;$dir/$_&quot;</span><span class="p">}</span> <span class="o">=</span> <span class="o">-</span><span class="n">d</span> <span class="s">&quot;$dir/$_&quot;</span> <span class="p">?</span> <span class="n">dirtree</span><span class="p">(</span><span class="s">&quot;$dir/$_&quot;</span><span class="p">)</span> <span class="p">:</span> <span class="s">&#39;&#39;</span> <span class="k">for</span> <span class="nv">@files</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">\</span><span class="nv">%tree</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to Perl6, you don&#8217;t need to open and close directories no more. There is a <em>dir()</em> function that does this for you. This function also filters the current &#8220;.&#8221; and parent &#8220;..&#8221; directories. The resulting code is a lot prettier.</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">dirtree</span><span class="p">($dir) {</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%tree</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">%tree</span><span class="p">{</span><span class="s">&quot;$dir/$_&quot;</span><span class="p">}</span> <span class="o">=</span> <span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">d</span> <span class="p">??</span> <span class="n">dirtree</span><span class="p">(</span><span class="s">&quot;$dir/$_&quot;</span><span class="p">)</span> <span class="o">!!</span> <span class="s">&#39;&#39;</span> <span class="k">for</span> <span class="n">dir</span><span class="p">(</span><span class="nv">$dir</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">%tree</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comments:</p>

<ul>
<li>New function signatures</li>
<li><em>?? and !!</em> is the new ternary operator wich replaces <em>? and :</em></li>
<li><em>.IO.d</em> means <em>$</em>.IO.d_</li>
<li>No need to escape the hash, Perl6 passes references to structures</li>
</ul>


<h2>The <em>menu</em> sub</h2>

<p>This recursive sub takes the preceding hash as argument and build a classic know <em>ul > li</em> menu.</p>

<figure class='code'><figcaption><span>Perl5  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">menu</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$tree</span><span class="p">,</span> <span class="nv">$path</span><span class="p">,</span> <span class="nv">$unfolded</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$menu</span> <span class="o">=</span> <span class="nv">$unfolded</span> <span class="p">?</span> <span class="s">&quot;&lt;ul class=\&quot;active\&quot;&gt;\n&quot;</span> <span class="p">:</span> <span class="s">&quot;&lt;ul&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="k">my</span> <span class="p">(</span><span class="nv">$link</span><span class="p">,</span> <span class="nv">$child</span><span class="p">)</span> <span class="o">=</span> <span class="nb">each</span> <span class="nv">%$tree</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$link</span> <span class="o">=~</span> <span class="sr">s/^data\///</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$label</span> <span class="o">=</span> <span class="nb">pop</span> <span class="nv">@</span><span class="p">{[</span> <span class="nb">split</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="nv">$link</span> <span class="p">]};</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="nv">$child</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$menu</span> <span class="o">.=</span> <span class="s">&quot;&lt;li class=\&quot;dir\&quot;&gt;$label\n&quot;</span><span class="o">.</span><span class="n">menu</span><span class="p">(</span><span class="nv">$child</span><span class="p">,</span> <span class="nv">$path</span><span class="p">,</span> <span class="nv">$path</span> <span class="o">=~</span><span class="sr"> /$link/</span><span class="p">)</span><span class="o">.</span><span class="s">&quot;&lt;/li&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$class</span> <span class="o">=</span> <span class="nv">$link</span> <span class="ow">eq</span> <span class="nv">$path</span> <span class="p">?</span> <span class="s">&#39; class=&quot;active&quot;&#39;</span> <span class="p">:</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$menu</span> <span class="o">.=</span> <span class="s">&quot;&lt;li$class&gt;&lt;a href=\&quot;/$link\&quot;&gt;$label&lt;/a&gt;&lt;/li&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$menu</span> <span class="o">.=</span> <span class="s">&quot;&lt;/ul&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the Perl6 code:</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">menu</span> <span class="p">(%tree, $path = &#39;&#39;, $unfolded = False) {</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$menu</span> <span class="o">=</span> <span class="nv">$unfolded</span> <span class="p">??</span> <span class="s">&quot;&lt;ul class=\&quot;active\&quot;&gt;\n&quot;</span> <span class="o">!!</span> <span class="s">&quot;&lt;ul&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="nv">%tree</span><span class="o">.</span><span class="n">kv</span> <span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">$link</span> <span class="n">is</span> <span class="n">copy</span><span class="p">,</span> <span class="nv">$child</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$link</span> <span class="o">~~</span> <span class="sr">s/^data\///</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$label</span> <span class="o">=</span> <span class="nv">$link</span><span class="o">.</span><span class="nb">split</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span><span class="o">.</span><span class="nb">pop</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="nv">$child</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$menu</span> <span class="o">~=</span> <span class="s">&quot;&lt;li class=\&quot;dir\&quot;&gt;$label\n&quot;</span> <span class="o">~</span> <span class="n">menu</span><span class="p">(</span><span class="nv">$child</span><span class="p">,</span> <span class="nv">$path</span><span class="p">,</span> <span class="nv">$path</span> <span class="o">~~</span> <span class="sr">/$link/</span><span class="p">)</span> <span class="o">~</span> <span class="s">&quot;&lt;/li&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$class</span> <span class="o">=</span> <span class="nv">$link</span> <span class="ow">eq</span> <span class="nv">$path</span> <span class="p">??</span> <span class="s">&#39; class=&quot;active&quot;&#39;</span> <span class="o">!!</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$menu</span> <span class="o">~=</span> <span class="s">&quot;&lt;li$class&gt;&lt;a href=\&quot;/$link\&quot;&gt; $label &lt;/a&gt;&lt;/li&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$menu</span> <span class="o">~=</span> <span class="s">&quot;&lt;/ul&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s look at it in details.</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">menu</span> <span class="p">(%tree, $path = &#39;&#39;, $unfolded = False) {</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new function signature forced me to specify a default value for my optionnal argument <em>$unfolded</em>.</p>

<p><em>%tree</em> is not casted to an array here and behave more like an hashref.</p>

<hr />

<p>Next chunk. One of the ways to loop over keys and values of a hash.</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="nv">%tree</span><span class="o">.</span><span class="n">kv</span> <span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">$link</span> <span class="n">is</span> <span class="n">copy</span><span class="p">,</span> <span class="nv">$child</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>I first tried something like this:</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="nv">%tree</span><span class="o">.</span><span class="n">pairs</span> <span class="p">)</span> <span class="p">{</span> <span class="n">say</span> <span class="o">.</span><span class="n">key</span><span class="p">;</span> <span class="n">say</span> <span class="o">.</span><span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But <em>.key</em> and <em>.value</em> cannot be interpolated in regexes, so I has to rename them. The <em>.kv</em> method does the trick here. It flattens the hash, and give as much elements as we ask for each loop. In this case 2.</p>

<p>The <em>is copy</em> thing took me a while to understand. It looks like Perl6 <em>for</em> creates read only variables. We have to tell the interpreter that we want copies instead. I don&#8217;t know the reasons. But for now I dislike this thing&#8230;</p>

<hr />

<p>Another interesing thing is this:</p>

<figure class='code'><figcaption><span>Perl5  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$label</span> <span class="o">=</span> <span class="nb">pop</span> <span class="nv">@</span><span class="p">{[</span> <span class="nb">split</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="nv">$link</span> <span class="p">]};</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, I embeds the result of split (wish is a list) in an arrayref, to cast it to an array so pop can pop it. I always hated this in Perl5.
I was happy to find that Perl6 is smarter than is predecessor in this case, I was able to rewrite it like the following:</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$label</span> <span class="o">=</span> <span class="nv">$pop</span> <span class="nb">split</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="nv">$link</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally in a more idiomatic way:</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$label</span> <span class="o">=</span> <span class="nv">$link</span><span class="o">.</span><span class="nb">split</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span><span class="o">.</span><span class="nb">pop</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The web framework callback</h2>

<p>This callback captures the entire path after / in the url.</p>

<figure class='code'><figcaption><span>Perl5  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">get</span> <span class="sx">qr{/(?&lt;path&gt;.*)}</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="n">captures</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">path</span><span class="p">}</span> <span class="o">||=</span> <span class="s">&#39;Home&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="s">&quot;&lt;html&gt;</span>
</span><span class='line'><span class="s">        &lt;head&gt;</span>
</span><span class='line'><span class="s">            &lt;link href=\&quot;/style.css\&quot; rel=\&quot;stylesheet\&quot; type=\&quot;text/css\&quot; /&gt;</span>
</span><span class='line'><span class="s">        &lt;/head&gt;</span>
</span><span class='line'><span class="s">        &lt;body&gt;</span>
</span><span class='line'><span class="s">            &lt;div&gt;</span>
</span><span class='line'><span class="s">                &lt;h1&gt;&lt;a href=\&quot;/\&quot;&gt;&lt;span id=\&quot;main-title\&quot;&gt;Polka~&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="s">                &lt;nav&gt;&quot;</span> <span class="o">.</span> <span class="n">menu</span><span class="p">(</span> <span class="nv">$dirtree</span><span class="p">,</span> <span class="n">captures</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">path</span><span class="p">}</span> <span class="p">)</span> <span class="o">.</span> <span class="s">&quot;&lt;/nav&gt;</span>
</span><span class='line'><span class="s">                &lt;div id=\&quot;page\&quot;&gt;&quot;</span> <span class="o">.</span> <span class="n">markdown</span><span class="p">(</span> <span class="n">slurp</span> <span class="s">&#39;data/&#39;</span><span class="o">.</span><span class="n">captures</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">path</span><span class="p">}</span> <span class="p">)</span> <span class="o">.</span> <span class="s">&quot;&lt;/div&gt;</span>
</span><span class='line'><span class="s">            &lt;/div&gt;</span>
</span><span class='line'><span class="s">            &lt;footer&gt;Powered by &lt;a href=\&quot;#\&quot;&gt;Polka&lt;/a&gt;.&lt;/footer&gt;</span>
</span><span class='line'><span class="s">        &lt;/body&gt;</span>
</span><span class='line'><span class="s">    &lt;/html&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">dance</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the new code in Perl6 using Bailador :</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">get</span> <span class="s">&#39;/(.*)&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">($path is copy) {</span>
</span><span class='line'>    <span class="nv">$path</span> <span class="o">=</span> <span class="s">&quot;$path&quot;</span> <span class="o">||</span> <span class="s">&quot;Home&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="s">&quot;&lt;html&gt;</span>
</span><span class='line'><span class="s">        &lt;head&gt;</span>
</span><span class='line'><span class="s">        &lt;link href=\&quot;/style.css\&quot; rel=\&quot;stylesheet\&quot; type=\&quot;text/css\&quot; /&gt;</span>
</span><span class='line'><span class="s">        &lt;/head&gt;</span>
</span><span class='line'><span class="s">        &lt;body&gt;</span>
</span><span class='line'><span class="s">            &lt;div&gt;</span>
</span><span class='line'><span class="s">                &lt;h1&gt;&lt;a href=\&quot;/\&quot;&gt;&lt;span id=\&quot;main-title\&quot;&gt;Polka~&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="s">                &lt;nav&gt;&quot;</span> <span class="o">~</span> <span class="n">menu</span><span class="p">(</span> <span class="nv">%dirtree</span><span class="p">,</span> <span class="nv">$path</span> <span class="p">)</span> <span class="o">~</span> <span class="s">&quot;&lt;/nav&gt;</span>
</span><span class='line'><span class="s">                &lt;div id=\&quot;page\&quot;&gt;&quot;</span> <span class="o">~</span> <span class="n">slurp</span><span class="p">(</span> <span class="s">&quot;data/$path&quot;</span> <span class="p">)</span> <span class="o">~</span> <span class="s">&quot;&lt;/div&gt;</span>
</span><span class='line'><span class="s">            &lt;/div&gt;</span>
</span><span class='line'><span class="s">            &lt;footer&gt;Powered by &lt;a href=\&quot;#\&quot;&gt;Polka&lt;/a&gt;.&lt;/footer&gt;</span>
</span><span class='line'><span class="s">        &lt;/body&gt;</span>
</span><span class='line'><span class="s">    &lt;/html&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">baile</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most of this code is not interesting, however, translating the following line gave me a headacke:</p>

<figure class='code'><figcaption><span>Perl5  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">captures</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">path</span><span class="p">}</span> <span class="o">||=</span> <span class="s">&#39;Home&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, I had to understand that the <em>$path</em> created by Bailador is read only. The <em>is copy</em> fixed this first issue.</p>

<p>I thought that the following would work,</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$path</span> <span class="o">||=</span> <span class="s">&#39;Home&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>but it did not, because an empty <em>$path</em> was evaluated to <em>True</em>!</p>

<p>To understand why, I had to debug like this:</p>

<figure class='code'><figcaption><span>Perl6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nv">$path</span><span class="o">.</span><span class="n">perl</span><span class="o">.</span><span class="n">say</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>wich is the new way to dump.</p>

<p>This gave me the reply. <em>$path</em> was an instance of the <em>Match()</em> class wich evaluates to <em>True</em> if the regex matches, wich is always the case, either way we would never have entered the callback.</p>

<p>The fix was to cast <em>$path</em> to a string. An empty string evaluates as <em>False</em> and that allowed me to test it and replace it if empty.</p>

<h2>Conclusions on the resulting Perl6 app</h2>

<ul>
<li>The code is smaller.</li>
<li>It is prettier in most cases.</li>
<li>Perl6 is fast enought to power webapps.</li>
<li>The error messages are more precise with a nice stacktrace, except when the interpretor gets <em>confused</em>.</li>
<li>Perl6 still lacks mainstream libs.</li>
<li>Too much types and classes makes the language tricky. This is my opinion.</li>
</ul>

]]></content>
  </entry>
  
</feed>
